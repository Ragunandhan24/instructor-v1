{"version":3,"sources":["components/addCourse.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["AddCourse","props","handleChange","e","target","value","test","setState","name","handleName","handleAdd","preventDefault","localData","getLocalStorage","data","courseName","state","duration","maxAttendees","length","currentIndex","newArray","splice","setLocalStorage","swal","history","push","existingArray","localStorage","setItem","JSON","stringify","console","log","parse","getItem","Promise","resolve","reject","location","index","then","response","catch","className","onSubmit","this","htmlFor","type","id","aria-describedby","onChange","required","to","React","Component","Home","courseData","loaded","handleDelete","handleEdit","pathname","scope","map","key","onClick","align","colSpan","App","style","textAlign","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c988b492.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/form.css\";\r\nimport swal from \"sweetalert\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass AddCourse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      courseName: \"\",\r\n      duration: \"\",\r\n      maxAttendees: \"\",\r\n      currentIndex: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let defaultState = new Promise((resolve, reject) => {\r\n      if (this.props.location.state) {\r\n        resolve({\r\n          courseName: this.props.location.state.value.courseName,\r\n          duration: this.props.location.state.value.duration,\r\n          maxAttendees: this.props.location.state.value.maxAttendees,\r\n          currentIndex: this.props.location.state.index\r\n        });\r\n      } else {\r\n        reject({\r\n          courseName: \"\",\r\n          duration: \"\",\r\n          maxAttendees: \"\",\r\n          currentIndex: \"\"\r\n        });\r\n      }\r\n    });\r\n\r\n    defaultState\r\n      .then(response => {\r\n        console.log(\"response from didmount\", response);\r\n        let { courseName, duration, maxAttendees, currentIndex } = response;\r\n        this.setState({\r\n          courseName,\r\n          duration,\r\n          maxAttendees,\r\n          currentIndex\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(\"error response\", e);\r\n        this.setState({ e });\r\n      });\r\n  }\r\n\r\n  handleChange = e => {\r\n    const re = /^[1-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  handleName = e => {\r\n    const re = /^[a-zA-Z\\-\\s]+$/;\r\n\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  handleAdd = e => {\r\n    e.preventDefault();\r\n    let localData = this.getLocalStorage();\r\n    let data = {\r\n      courseName: this.state.courseName,\r\n      duration: this.state.duration,\r\n      maxAttendees: this.state.maxAttendees\r\n    };\r\n\r\n    if (data.courseName.length >= 5) {\r\n      if (this.state.currentIndex >= 0 && this.state.currentIndex !== \"\") {\r\n        let newArray = [...localData];\r\n        newArray.splice(this.state.currentIndex, 1, data);\r\n        this.setLocalStorage(newArray);\r\n        swal(\"Nice\", \"The course has been Saved\", \"success\");\r\n        this.props.history.push(\"/\");\r\n      } else {\r\n        if (localData) {\r\n          let existingArray = [...localData];\r\n          existingArray.push(data);\r\n          this.setLocalStorage(existingArray);\r\n        } else {\r\n          let newArray = [];\r\n          newArray.push(data);\r\n          this.setLocalStorage(newArray);\r\n        }\r\n        this.setState({\r\n          courseName: \"\",\r\n          duration: \"\",\r\n          maxAttendees: \"\"\r\n        });\r\n        swal(\"Nice\", \"The course has been Saved\", \"success\");\r\n      }\r\n    } else {\r\n      swal(\r\n        \"Course Name Error\",\r\n        \"Course Name should be atleast 6 Characters\",\r\n        \"error\"\r\n      );\r\n    }\r\n  };\r\n\r\n  setLocalStorage = data => {\r\n    localStorage.setItem(\"courseData\", JSON.stringify(data));\r\n  };\r\n  getLocalStorage = () => {\r\n    console.log(\"getlocal\", JSON.parse(localStorage.getItem(\"courseData\")));\r\n    return JSON.parse(localStorage.getItem(\"courseData\"));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-lg-6 col-md-8 col-sm-10 col-xs-12\">\r\n            <form onSubmit={this.handleAdd} className=\"form-container\">\r\n              <h4>Add Course</h4>\r\n              <hr></hr>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"coursename\">Course Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"coursename\"\r\n                  aria-describedby=\"emailHelp\"\r\n                  onChange={this.handleName}\r\n                  name=\"courseName\"\r\n                  value={this.state.courseName}\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"duration\">Duration (in Hours)</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"duration\"\r\n                  onChange={this.handleChange}\r\n                  name=\"duration\"\r\n                  value={this.state.duration}\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"maxattendees\">Max Attendees (number)</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"maxattendees\"\r\n                  onChange={this.handleChange}\r\n                  name=\"maxAttendees\"\r\n                  value={this.state.maxAttendees}\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                Add\r\n              </button>\r\n              <Link to=\"/\" className=\"btn btn-primary\">\r\n                Back\r\n              </Link>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCourse;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    courseData: [],\r\n    loaded: false\r\n  };\r\n  componentDidMount() {\r\n    let getCourseData = new Promise((resolve, reject) => {\r\n      let courseData = JSON.parse(localStorage.getItem(\"courseData\"));\r\n      if (courseData && courseData.length > 0) {\r\n        resolve(courseData);\r\n      } else {\r\n        reject(\"no data\");\r\n      }\r\n    });\r\n\r\n    getCourseData\r\n      .then(response => {\r\n        console.log(\"response\", response);\r\n        this.setState({\r\n          courseData: response,\r\n          loaded: true\r\n        });\r\n      })\r\n      .catch(e => console.log(e));\r\n  }\r\n\r\n  handleDelete = index => {\r\n    let data = [...this.state.courseData];\r\n    data.splice(index, 1);\r\n    console.log(data);\r\n    this.setState({\r\n      courseData: data\r\n    });\r\n    localStorage.setItem(\"courseData\", JSON.stringify(data));\r\n  };\r\n\r\n  handleEdit = index => {\r\n    let data = [...this.state.courseData];\r\n    let value = data[index];\r\n    this.props.history.push({\r\n      pathname: \"/add\",\r\n      state: {\r\n        index,\r\n        courseData: this.state.courseData,\r\n        value: value\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1>Home</h1>\r\n\r\n          <table className=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Course Name</th>\r\n                <th scope=\"col\">Duration (in hours)</th>\r\n                <th scope=\"col\">Max Attendees</th>\r\n                <th scope=\"col\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.courseData.length > 0 ? (\r\n                this.state.courseData.map((data, index) => {\r\n                  console.log(\"index inside map\", index);\r\n                  return (\r\n                    <tr key={index}>\r\n                      <th scope=\"row\">{index + 1}</th>\r\n                      <td>{data.courseName}</td>\r\n                      <td>{data.duration}</td>\r\n                      <td>{data.maxAttendees}</td>\r\n                      <td>\r\n                        <button\r\n                          onClick={() => this.handleEdit(index)}\r\n                          type=\"button\"\r\n                          className=\"btn btn-primary\"\r\n                        >\r\n                          Edit\r\n                        </button>\r\n                        <button\r\n                          onClick={() => this.handleDelete(index)}\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger\"\r\n                        >\r\n                          Delete\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              ) : (\r\n                <tr>\r\n                  <td align=\"center\" colSpan=\"5\">\r\n                    No Data Saved\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <Link to=\"/add\">Add</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport AddCourse from \"./components/addCourse\";\nimport Home from \"./components/home\";\nimport { Route, Switch } from \"react-router-dom\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 style={{ textAlign: \"center\" }}>Instructor</h1>\n\n        <Switch>\n          <Route path=\"/\" component={Home} exact></Route>\n          <Route path=\"/add\" component={AddCourse} exact></Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}